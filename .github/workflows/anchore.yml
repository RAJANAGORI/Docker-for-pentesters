name: Anchore Grype Vulnerability Scan

on:
  push:
    branches: [ "debug-anchore-grype" ]
    paths:
      - ".github/workflows/anchore.yml"
  pull_request:
    branches: [ "main" ]
    paths:
      - ".github/workflows/anchore.yml"
  schedule:
    - cron: '0 23 * * 0'

jobs:
  Anchore-Build-Scan:
    permissions:
      contents: read
      security-events: write
      actions: read
    runs-on: ubuntu-22.04

    steps:
    - name: Check out the code
      uses: actions/checkout@v4

    - name: Aggressive Disk Cleanup
      run: |
        echo "Starting aggressive disk cleanup..."
        sudo rm -rf /var/log/*
        sudo apt-get clean
        sudo rm -rf /var/lib/apt/lists/*
        sudo rm -rf /usr/share/doc/*
        sudo rm -rf /usr/share/man/*
        sudo rm -rf /home/runner/work/_temp
        sudo rm -rf /home/runner/work/_actions
        sudo rm -rf /home/runner/.npm
        sudo rm -rf /home/runner/.cache
        sudo rm -rf /home/runner/.local
        df -h

    - name: Print environment details and disk space
      run: |
        echo "Running on $(uname -a)"
        echo "Current directory: $(pwd)"
        df -h
        docker --version
     
    - name: Build the Docker image and save as tar
      run: |
        echo "Building Docker image..."
        docker build . -f Dockerfile -t localbuild/testimage:latest
        docker save localbuild/testimage:latest -o image.tar
        echo "Docker image saved as tar. Disk space:"
        df -h
    
    - name: Clean up Docker
      run: |
        echo "Cleaning up Docker to free up space..."
        docker system prune -f --volumes
        df -h

    - name: Run the Anchore Grype scan on the tarball
      id: scan
      uses: anchore/scan-action@v2
      with:
        input: image.tar
        grype-version: 0.84.0

    - name: Convert JSON to SARIF dynamically
      run: |
        echo "Starting conversion of vulnerabilities.json to SARIF..."
        echo "Starting conversion of vulnerabilities.json to SARIF..."

        jq -n --arg version "2.1.0" --arg toolName "Anchore Grype" --arg toolVersion "0.77.4" '{
          "version": $version,
          "runs": [
            {
              "tool": {
                "driver": {
                  "name": $toolName,
                  "version": $toolVersion
                }
              },
              "results": []
            }
          ]
        }' > output.sarif

        # Define a mapping function for severity to SARIF levels
        map_severity() {
          case "$1" in
            "critical" | "high")
              echo "error";;
            "medium")
              echo "warning";;
            "low" | "negligible")
              echo "note";;
            *)
              echo "none";;
          esac
        }

        jq -c '.matches[]' vulnerabilities.json | while read -r vulnerability; do
          # Extract severity and map it to a valid SARIF level
          severity=$(echo "$vulnerability" | jq -r '.vulnerability.severity')
          sarif_level=$(map_severity "$severity")

          artifact_name=$(echo "$vulnerability" | jq -r '.artifact.name')
          artifact_version=$(echo "$vulnerability" | jq -r '.artifact.version')
          artifact_uri="file://path/to/$artifact_name-$artifact_version"

          sarif_result=$(echo "$vulnerability" | jq --arg sarif_level "$sarif_level" --arg artifact_uri "$artifact_uri" '{
            "ruleId": .vulnerability.id,
            "level": $sarif_level,
            "message": { "text": (.vulnerability.description // "No description provided") },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": $artifact_uri
                  }
                }
              }
            ],
            "properties": (to_entries | map({(.key): .value}) | add)
          }')

          jq --argjson result "$sarif_result" '.runs[0].results += [$result]' output.sarif > temp.sarif && mv temp.sarif output.sarif
        done

        echo "SARIF conversion complete. Output saved to output.sarif."

    - name: Check SARIF file
      run: |
        if [ -f output.sarif ]; then
          echo "SARIF file exists:"
          cat output.sarif
        else
          echo "SARIF file does not exist."
          exit 1
        fi

    - name: Upload SARIF report
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: output.sarif
    
    - name: Upload vulnerability reports
      uses: actions/upload-artifact@v3
      with:
        name: vulnerability-reports
        path: |
          vulnerabilities.json
          output.sarif

    - name: Final cleanup
      run: |
        echo "Cleaning up unused containers and images..."
        docker system prune -f
        echo "Final disk space:"
        df -h