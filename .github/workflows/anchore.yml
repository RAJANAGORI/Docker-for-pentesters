name: Anchore Grype Vulnerability Scan

on:
  push:
    branches: [ "debug-anchore-grype" ]
    paths:
      - ".github/workflows/anchore.yml"
  pull_request:
    branches: [ "main" ]
    paths:
      - ".github/workflows/anchore.yml"

jobs:
  Anchore-Build-Scan:
    permissions:
      contents: read
      security-events: write
    runs-on: ubuntu-latest

    steps:
    - name: Check out the code
      uses: actions/checkout@v4

    - name: Print environment details and disk space
      run: |
        echo "Running on $(uname -a)"
        echo "Current directory: $(pwd)"
        df -h
        docker --version
     
    - name: Build the Docker image
      run: |
        echo "Building Docker image..."
        docker build . --file Dockerfile --tag localbuild/testimage:latest
        echo "Docker build finished with exit code $?"
        echo "Listing Docker images:"
        docker images
    
    - name: Clean up Docker
      run: |
        echo "Cleaning up Docker to free up space..."
        docker system prune -f
        echo "Disk space after cleanup:"
        df -h

    - name: Run the Anchore Grype scan action
      id: scan
      uses: anchore/scan-action@v2
      with:
        image: "localbuild/testimage:latest"
        grype-version: 0.77.4

    - name: Upload vulnerability report
      uses: actions/upload-artifact@v3
      with:
        name: vulnerabilities-report
        path: vulnerabilities.json

    - name: Convert JSON to SARIF dynamically
      run: |
        echo "Starting conversion of vulnerabilities.json to SARIF..."

        # Create the initial SARIF structure and write it to the output file
        jq -n --arg version "2.1.0" --arg toolName "Anchore Grype" --arg toolVersion "0.77.4" '{
          "version": $version,
          "runs": [
            {
              "tool": {
                "driver": {
                  "name": $toolName,
                  "version": $toolVersion
                }
              },
              "results": []
            }
          ]
        }' > output.sarif

        # Define a mapping function for severity to SARIF levels
        map_severity() {
          case "$1" in
            "critical" | "high")
              echo "error";;
            "medium")
              echo "warning";;
            "low" | "negligible")
              echo "note";;
            *)
              echo "none";;
          esac
        }

        # Process vulnerabilities.json and map all fields to SARIF structure
        jq -c '.matches[]' vulnerabilities.json | while read -r vulnerability; do
          # Extract severity and map it to a valid SARIF level
          severity=$(echo "$vulnerability" | jq -r '.vulnerability.severity')
          sarif_level=$(map_severity "$severity")

          # Ensure that the URI has the correct file:// scheme
          artifact_name=$(echo "$vulnerability" | jq -r '.artifact.name')
          artifact_version=$(echo "$vulnerability" | jq -r '.artifact.version')
          artifact_uri="file://$artifact_name:$artifact_version"

          # Build a SARIF result with dynamically added fields
          sarif_result=$(echo "$vulnerability" | jq --arg sarif_level "$sarif_level" --arg artifact_uri "$artifact_uri" '{
            "ruleId": .vulnerability.id,
            "level": $sarif_level,
            "message": { "text": (.vulnerability.description // "No description provided") },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": $artifact_uri
                  }
                }
              }
            ],
            # Add all other fields from the vulnerability under properties
            "properties": (to_entries | map({(.key): .value}) | add)
          }')

          # Append each dynamically created result to the SARIF output file
          jq --argjson result "$sarif_result" '.runs[0].results += [$result]' output.sarif > temp.sarif && mv temp.sarif output.sarif
        done

        echo "SARIF conversion complete. Output saved to output.sarif."

    - name: Check SARIF file
      run: |
        if [ -f output.sarif ]; then
          echo "SARIF file exists:"
          cat output.sarif
        else
          echo "SARIF file does not exist."
          exit 1
        fi

    - name: Upload SARIF report
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: output.sarif

    - name: Final cleanup
      run: |
        echo "Cleaning up unused containers and images..."
        docker system prune -f
        echo "Final disk space:"
        df -h