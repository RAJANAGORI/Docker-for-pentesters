name: Anchore Grype Vulnerability Scan

on:
  push:
    branches: [ "debug-anchore-grype" ]
    paths:
      - ".github/workflows/anchore.yml"
  pull_request:
    branches: [ "main" ]
    paths:
      - ".github/workflows/anchore.yml"

jobs:
  Anchore-Build-Scan:
    permissions:
      contents: read
      security-events: write
    runs-on: ubuntu-latest

    steps:
    - name: Check out the code
      uses: actions/checkout@v4

    - name: Print environment details and disk space
      run: |
        echo "Running on $(uname -a)"
        echo "Current directory: $(pwd)"
        df -h
        docker --version
    
    - name: Build the Docker image
      run: |
        echo "Building Docker image..."
        docker build . --file Dockerfile --tag localbuild/testimage:latest
        echo "Docker build finished with exit code $?"
        echo "Listing Docker images:"
        docker images

    - name: Clean up Docker
      run: |
        echo "Cleaning up Docker to free up space..."
        docker system prune -f
        echo "Disk space after cleanup:"
        df -h

    - name: Run the Anchore Grype scan action
      id: scan
      uses: anchore/scan-action@v2
      with:
        image: "localbuild/testimage:latest"
        grype-version: 0.77.4

    - name: Upload vulnerability report
      uses: actions/upload-artifact@v3
      with:
        name: vulnerabilities-report
        path: vulnerabilities.json

    - name: Convert JSON to SARIF dynamically
      run: |
        echo "Starting conversion of vulnerabilities.json to SARIF..."

        # Initialize the SARIF output structure
        sarif_output='{
          "version": "2.1.0",
          "runs": [
            {
              "tool": {
                "driver": {
                  "name": "Anchore Grype",
                  "version": "0.77.4"
                }
              },
              "results": []
            }
          ]
        }'

        # Create a temporary file for SARIF results
        sarif_results_temp=$(mktemp)

        # Read vulnerabilities one by one and convert them to SARIF format
        jq -c '.matches[]' vulnerabilities.json | while IFS= read -r vulnerability; do
          # Extract fields
          vulnerability_id=$(echo "$vulnerability" | jq -r '.vulnerability.id')
          severity=$(echo "$vulnerability" | jq -r '.vulnerability.severity')
          description=$(echo "$vulnerability" | jq -r '.vulnerability.description // "No description provided"')
          package_name=$(echo "$vulnerability" | jq -r '.artifact.name')
          package_version=$(echo "$vulnerability" | jq -r '.artifact.version')

          # Construct the SARIF result for the current vulnerability
          sarif_result=$(jq -n \
            --arg id "$vulnerability_id" \
            --arg sev "$(echo "$severity" | tr '[:upper:]' '[:lower:]')" \
            --arg desc "$description" \
            --arg pkg "$package_name" \
            --arg ver "$package_version" '
            {
              "ruleId": $id,
              "level": $sev,
              "message": { "text": $desc },
              "locations": [{
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "\($pkg):\($ver)"
                  }
                }
              }],
              "customProperties": {}
            }'
          )

          # Append to the temporary SARIF result file
          echo "$sarif_result" >> "$sarif_results_temp"
        done

        # Format the results array properly for JSON
        sarif_results="[ $(cat "$sarif_results_temp" | paste -sd, -) ]"

        # Finalize the SARIF output with the collected results
        sarif_output=$(echo "$sarif_output" | jq --argjson results "$sarif_results" '.runs[0].results = $results')

        # Save the SARIF output to a file
        echo "$sarif_output" > output.sarif

        # Clean up temporary file
        rm "$sarif_results_temp"

    - name: Check SARIF file
      run: |
        if [ -f output.sarif ]; then
          echo "SARIF file exists:"
          cat output.sarif
        else
          echo "SARIF file does not exist."
        fi
    - name: Upload SARIF report
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: output.sarif

    - name: Final cleanup
      run: |
        echo "Cleaning up unused containers and images..."
        docker system prune -f
        echo "Final disk space:"
        df -h