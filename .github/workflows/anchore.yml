name: Anchore Grype Vulnerability Scan

on:
  push:
    branches: [ "debug-anchore-grype" ]
    paths:
      - ".github/workflows/anchore.yml"
  pull_request:
    branches: [ "main" ]
    paths:
      - ".github/workflows/anchore.yml"

jobs:
  Anchore-Build-Scan:
    permissions:
      contents: read
      security-events: write
    runs-on: ubuntu-latest

    steps:
    # Check out the code
    - name: Check out the code
      uses: actions/checkout@v4

    # Print environment and available disk space for debugging
    - name: Print environment details and disk space
      run: |
        echo "Running on $(uname -a)"
        echo "Current directory: $(pwd)"
        df -h
        docker --version
    
    # Build Docker image 
    - name: Build the Docker image
      run: |
        echo "Building Docker image..."
        docker build . --file Dockerfile --tag localbuild/testimage:latest
        echo "Docker build finished with exit code $?"
        echo "Listing Docker images:"
        docker images
    # Clean up unused Docker images to free up space
    - name: Clean up Docker
      run: |
        echo "Cleaning up Docker to free up space..."
        docker system prune -f
        echo "Disk space after cleanup:"
        df -h
    - name: Run the Anchore Grype scan action
      id: scan
      uses: anchore/scan-action@v2
      with:
        image: "localbuild/testimage:latest"
        grype-version: 0.77.4

    - name: Upload vulnerability report
      uses: actions/upload-artifact@v3
      with:
        name: vulnerabilities-report
        path: vulnerabilities.json

    - name: Convert JSON to SARIF dynamically
      run: |
        echo "Starting conversion of vulnerabilities.json to SARIF..."

        # Initialize the SARIF structure
        sarif_output=$(jq -n --arg version "2.1.0" --arg toolName "Anchore Grype" --arg toolVersion "0.77.4" '{
          "version": $version,
          "runs": [
            {
              "tool": {
                "driver": {
                  "name": $toolName,
                  "version": $toolVersion
                }
              },
              "results": []
            }
          ]
        }')

        # Process the vulnerabilities.json file using jq
        sarif_results=$(jq '[.matches[] | {
          "ruleId": .vulnerability.id,
          "level": (.vulnerability.severity | ascii_downcase),
          "message": { "text": (.vulnerability.description // "No description provided") },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": (.artifact.name + ":" + .artifact.version)
                }
              }
            }
          ],
          "customProperties": (to_entries | map(select(.key != "vulnerability" and .key != "artifact") | {(.key): .value}) | add)
        }]' vulnerabilities.json)

        # Append results to the SARIF output
        sarif_output=$(echo "$sarif_output" | jq --argjson results "$sarif_results" '.runs[0].results = $results')

        # Save the SARIF output to a file
        echo "$sarif_output" > output.sarif

    - name: Check SARIF file
      run: |
        if [ -f output.sarif ]; then
          echo "SARIF file exists:"
          cat output.sarif
        else
          echo "SARIF file does not exist."
          exit 1
        fi

    - name: Upload SARIF report
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: output.sarif

    # Additional cleanup
    - name: Final cleanup
      run: |
        echo "Cleaning up unused containers and images..."
        docker system prune -f
        echo "Final disk space:"
        df -h