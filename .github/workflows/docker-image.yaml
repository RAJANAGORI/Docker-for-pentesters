# name: Docker Image CI

# on:
#   push:
#     branches: [development]
#     paths:
#       - "Dockerfiles/*.Dockerfile"
#       - "Dockerfile"
#       - ".github/workflows/docker-image.yaml"
#   pull_request:
#     branches: [development]
#     paths:
#       - "Dockerfiles/*.Dockerfile"
#       - "Dockerfile"
#       - ".github/workflows/docker-image.yaml"

# env:
#   DOCKER_REGISTRY: ghcr.io
#   DOCKERFILES_PATH: Dockerfiles
#   IMAGE_NAME: ${{ github.repository }}


# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v3
#     - name: Github Login
#       env:
#         GITHUB_TOKEN: ${{secrets.TOKEN}}
#       run: |
#         echo "${{secrets.TOKEN}}" | docker login ghcr.io -u ${{secrets.USERNAME}} --password-stdin
#     # Clear apt cache    
#     - name: Clear apt cache
#       run: sudo apt-get clean

#     # Build Docker images
#     - name: Build nightingale_programming_image
#       run: |
#         docker build . --no-cache --file $DOCKERFILES_PATH/programming_langauge.Dockerfile --label branch=development --label owner=RAJANAGORI --tag $DOCKER_REGISTRY/rajanagori/nightingale_programming_image:development
#     # # Push Docker images
#     - name: Push nightingale_programming_image
#       run: docker push "$DOCKER_REGISTRY/rajanagori/nightingale_programming_image:development"

#     - name: Build nightingale_forensic_and_red_teaming
#       run: |
#         docker build . --no-cache --file $DOCKERFILES_PATH/forensics_and_redteam.Dockerfile --label branch=development --label owner=RAJANAGORI --tag $DOCKER_REGISTRY/rajanagori/nightingale_forensic_and_red_teaming:development
    
#     - name: Push nightingale_forensic_and_red_teaming1
#       run: docker push "$DOCKER_REGISTRY/rajanagori/nightingale_forensic_and_red_teaming:development"
    
#     - name: Build nightingale_web_vapt_image
#       run: |
#         docker build  . --no-cache --file $DOCKERFILES_PATH/web_vapt.Dockerfile --label branch=development --label owner=RAJANAGORI --tag $DOCKER_REGISTRY/rajanagori/nightingale_web_vapt_image:development
    
#     - name: Push nightingale_web_vapt_image
#       run: docker push "$DOCKER_REGISTRY/rajanagori/nightingale_web_vapt_image:development"
    
#     - name: Build nightingale_network_vapt_image
#       run: |
#         docker build . --no-cache --file $DOCKERFILES_PATH/network_vapt.Dockerfile --label branch=development --label owner=RAJANAGORI --tag $DOCKER_REGISTRY/rajanagori/nightingale_network_vapt_image:development
    
#     - name: Push nightingale_network_vapt_image
#       run: docker push "$DOCKER_REGISTRY/rajanagori/nightingale_network_vapt_image:development"
    
#     - name: Build nightingale_osint_image
#       run: |
#         docker build . --no-cache --file $DOCKERFILES_PATH/osint_tools.Dockerfile --label branch=development --label owner=RAJANAGORI --tag $DOCKER_REGISTRY/rajanagori/nightingale_osint_tools_image:development
    
#     - name: Push nightingale_osint_image
#       run: docker push "$DOCKER_REGISTRY/rajanagori/nightingale_osint_tools_image:development"
    
#     - name: Build nightingale_mobile_vapt_image
#       run: |
#         docker build . --no-cache --file $DOCKERFILES_PATH/mobile_vapt.Dockerfile --label branch=development --label owner=RAJANAGORI --tag $DOCKER_REGISTRY/rajanagori/nightingale_mobile_vapt_image:development
    
#     - name: Push nightingale_mobile_vapt_image
#       run: docker push "$DOCKER_REGISTRY/rajanagori/nightingale_mobile_vapt_image:development"
    
#     - name: Build nightingale_wordlist_image
#       run: |
#         docker build . --no-cache --file $DOCKERFILES_PATH/wordlist.Dockerfile --label branch=development --label owner=RAJANAGORI --tag $DOCKER_REGISTRY/rajanagori/nightingale_wordlist_image:development
    
#     - name: Push nightingale_wordlist_image
#       run: docker push "$DOCKER_REGISTRY/rajanagori/nightingale_wordlist_image:development"
    
#     - name: Build nightingale_development_image
#       run: |
#         docker build . --no-cache --file Dockerfile --label branch=development --label owner=RAJANAGORI --tag $DOCKER_REGISTRY/rajanagori/nightingale:development

#     - name: Push nightingale_development_image
#       run: docker push "$DOCKER_REGISTRY/rajanagori/nightingale:development"
name: Docker Image CI

on:
  push:
    branches: [development]
    paths:
      - "Dockerfiles/*.Dockerfile"
      - "Dockerfile"
      - ".github/workflows/docker-image.yaml"
  pull_request:
    branches: [development]
    paths:
      - "Dockerfiles/*.Dockerfile"
      - "Dockerfile"
      - ".github/workflows/docker-image.yaml"

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKERFILES_PATH: Dockerfiles
  ACTIONS_RUNNER_DEBUG: true
  ACTIONS_STEP_DEBUG: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: GitHub Login
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ secrets.USERNAME }} --password-stdin

    - name: Set Image Name to Lowercase
      run: |
        IMAGE_NAME_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
        echo "IMAGE_NAME=$IMAGE_NAME_LOWER" >> $GITHUB_ENV

    - name: Clear apt cache
      run: sudo apt-get clean

    - name: Determine Version Series
      id: series
      run: |
        BASE_PREFIX="v"
        TAGS=$(curl -s https://ghcr.io/v2/${{ env.IMAGE_NAME }}/tags/list)
        if echo "$TAGS" | jq . > /dev/null 2>&1; then
          TAGS=$(echo "$TAGS" | jq -r ".tags[] | select(startswith(\"${BASE_PREFIX}\"))")
        else
          TAGS="[]"
        fi
        PREFIX=$(echo "$TAGS" | grep -oP "${BASE_PREFIX}\d+\.\d+" | sort -V | tail -n 1)
        if [ -z "$PREFIX" ]; then
          PREFIX="${BASE_PREFIX}1.0"
        fi
        echo "VERSION_PREFIX=$PREFIX" >> $GITHUB_ENV

    - name: Calculate Version Tag
      id: version
      run: |
        TAG_PREFIX="${{ env.VERSION_PREFIX }}."
        TAGS=$(curl -s https://ghcr.io/v2/${{ env.IMAGE_NAME }}/tags/list | jq -r ".tags[] | select(startswith(\"${TAG_PREFIX}\"))" || echo "[]")
        LATEST_TAG=$(echo "$TAGS" | sort -V | tail -n 1)
        if [ -z "$LATEST_TAG" ]; then
          NEXT_VERSION="0"
        else
          NEXT_VERSION=$(echo $LATEST_TAG | awk -F '.' '{print $3+1}')
        fi
        VERSION_TAG="${TAG_PREFIX}${NEXT_VERSION}"
        echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV

    - name: Get Commit Hash
      id: vars
      run: echo "COMMIT_HASH=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV

    # Build and Push Docker images with development, version, and commit hash tags
    - name: Build and Push Images
      run: |
        IMAGES=(
          "nightingale_programming_image:$DOCKERFILES_PATH/programming_langauge.Dockerfile"
          "nightingale_forensic_and_red_teaming:$DOCKERFILES_PATH/forensics_and_redteam.Dockerfile"
          "nightingale_web_vapt_image:$DOCKERFILES_PATH/web_vapt.Dockerfile"
          "nightingale_network_vapt_image:$DOCKERFILES_PATH/network_vapt.Dockerfile"
          "nightingale_osint_tools_image:$DOCKERFILES_PATH/osint_tools.Dockerfile"
          "nightingale_mobile_vapt_image:$DOCKERFILES_PATH/mobile_vapt.Dockerfile"
          "nightingale_wordlist_image:$DOCKERFILES_PATH/wordlist.Dockerfile"
          "nightingale:Dockerfile"
        )
        
        for IMAGE in "${IMAGES[@]}"; do
          IFS=":" read -r IMAGE_NAME DOCKERFILE_PATH <<< "$IMAGE"
          docker build . --no-cache --file $DOCKERFILE_PATH \
            --label branch=development --label owner=RAJANAGORI \
            --tag $DOCKER_REGISTRY/${{ env.IMAGE_NAME }}/$IMAGE_NAME:development \
            --tag $DOCKER_REGISTRY/${{ env.IMAGE_NAME }}/$IMAGE_NAME:${{ env.VERSION_TAG }} \
            --tag $DOCKER_REGISTRY/${{ env.IMAGE_NAME }}/$IMAGE_NAME:${{ env.COMMIT_HASH }}
          docker push "$DOCKER_REGISTRY/${{ env.IMAGE_NAME }}/$IMAGE_NAME:development"
          docker push "$DOCKER_REGISTRY/${{ env.IMAGE_NAME }}/$IMAGE_NAME:${{ env.VERSION_TAG }}"
          docker push "$DOCKER_REGISTRY/${{ env.IMAGE_NAME }}/$IMAGE_NAME:${{ env.COMMIT_HASH }}"
        done