env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAMES: |
    nightingale_web_vapt_image
    nightingale_wordlist_image
    nightingale_network_vapt_image
    nightingale_forensic_and_red_teaming
    nightingale_osint_tools_image
    nightingale_mobile_vapt_image
    nightingale
    nightingale_programming_image

jobs:
  amd64:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image-name: ${{ fromJson(env.IMAGE_NAMES) }}
    steps:
    - uses: actions/checkout@v3
    - name: Github Login
      env:
        GITHUB_TOKEN: ${{secrets.TOKEN}}
      run: |
        echo "${{secrets.TOKEN}}" | docker login ghcr.io -u ${{secrets.USERNAME}} --password-stdin
    
    - name: List Docker Images
      run: |
        docker images

      - name: Delete old images
      run: |
        # Get the image tags from the GitHub package registry
        curl -X POST -s -H "Accept: application/vnd.github.v3+json" -H "Authorization: bearer ${{secrets.TOKEN}}" -d '{"query":"query {repository (owner:\"${{github.repository_owner}}\", name:\"${{github.repository}}\") {packages (names:[\"${{matrix.image-name}}\"], last:1) {nodes {versions (last:100) {nodes {id, name, publishedAt}}}}}}"}' -o /tmp/response.json --url https://api.github.com/graphql

        # Filter the tags by multiple tags
        cat /tmp/response.json | jq -r '.data.repository.packages.nodes[0].versions.nodes | map(select(.name == "development" or .name == "linux_amd64_development" or .name == "darwin_x86-64_development" or .name == "darwin_amd64_development")) | .[].name' > /tmp/tags.txt

        # Sort the tags by published date in descending order
        SORTED_TAGS=($(cat /tmp/tags.txt | xargs -n1 cat /tmp/response.json | jq -r --arg tag "${{ matrix.image-name }}" '.data.repository.packages.nodes[0].versions.nodes | map(select(.name == $tag)) | .[0].publishedAt + " " + .[0].name' | sort -r -k1 | cut -d ' ' -f2))

        # Keep the latest 3 tags
        TAGS_TO_KEEP=("${SORTED_TAGS[@]:0:3}")

        # Remove all other tags
        for tag in "${SORTED_TAGS[@]}"; do
          if [[ ! " ${TAGS_TO_KEEP[@]} " =~ " ${tag} " ]]; then
            curl -X DELETE -s -H "Accept: application/vnd.github.package-deletes-preview+json" -H "Authorization: bearer ${{secrets.TOKEN}}" --url https://api.github.com/graphql -d '{"query":"mutation {deletePackageVersion (input:{packageVersionId:\"$(cat /tmp/response.json | jq -r --arg tag $tag '.data.repository.packages.nodes[0].versions.nodes | map(select(.name == $tag)) | .[0].id')\"}) {success}}"}'
          fi
        done